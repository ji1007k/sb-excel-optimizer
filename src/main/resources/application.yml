# -----------------------------------------------------------------------------
# 1. 공통 설정 (기본값)
# -----------------------------------------------------------------------------
spring:
  application:
    name: excel-performance-optimizer

  profiles:
    active: dev # 기본 프로파일 설정

  # JPA/Hibernate 공통 설정 (모든 프로파일에 적용)
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        # Batch Insert 최적화 설정
        jdbc:
          batch_size: 1000
          batch_versioned_data: true
        order_inserts: true
        order_updates: true

# -----------------------------------------------------------------------------
# 2. 서버 & 애플리케이션 공통 설정
# -----------------------------------------------------------------------------
server:
  port: 8081
  # 내장 톰캣 설정
  tomcat:
    threads:
      max: 200  # default
      
logging:
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  level:
    com.performance.excel: DEBUG  # 기본 디버그 레벨
    org.springframework.web.socket: DEBUG
    org.hibernate.SQL: INFO
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

excel:
  download:
    directory: downloads/
    max-concurrent: 3
    batch-size: 1000
    poll-interval: 1000
  security:
    max-file-size: 100MB
    max-rows: 1000000
    max-columns: 1000
    enable-strict-validation: true

# -----------------------------------------------------------------------------
# 3. 개발 프로파일 (dev)
# -----------------------------------------------------------------------------
---
spring:
  config:
    activate:
      on-profile: dev

  # Docker Compose 설정
  docker:
    compose:
      enabled: true
      file: ./compose-dev.yaml
      # 타임아웃 시간. 기본 2분(PT2M)
      readiness:
        timeout: PT2M

  # Redis 설정
  data:
    redis:
      host: localhost
      port: 26379

  # PostgreSQL Database 설정
  datasource:
    url: jdbc:postgresql://localhost:5432/ec_db
    driver-class-name: org.postgresql.Driver
    username: ec_user
    password: ec_pwd
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  jpa:
    hibernate:
      ddl-auto: update # 개발 환경: 스키마 변경 시 업데이트
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  logging:
    level:
      com.performance.excel: INFO
      org.springframework.web: WARN
      org.hibernate: WARN
      root: WARN

# -----------------------------------------------------------------------------
# 4. 테스트 프로파일 (test)
# -----------------------------------------------------------------------------
---
spring:
  config:
    activate:
      on-profile: test

  # Docker Compose 설정
  docker:
    compose:
      enabled: true
      file: ./compose-dev.yaml
      # 타임아웃 시간. 기본 2분(PT2M)
      readiness:
        timeout: PT2M
      skip:
        in-tests: false   # Docker Compose 지원 활성화 <-> true (비활성화. 기본)

  # Redis 설정
  data:
    redis:
      host: localhost
      port: 26379

  # H2 Database 설정 (In-Memory)
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password:

  jpa:
    hibernate:
      ddl-auto: create-drop # 테스트 환경: 실행 시마다 스키마 재생성
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect

  h2:
    console:
      enabled: false

  logging:
    level:
      org.hibernate.SQL: INFO # 테스트 시 쿼리 로그 INFO로 전환

# -----------------------------------------------------------------------------
# 5. 운영 프로파일 (prod)
# -----------------------------------------------------------------------------
---
spring:
  config:
    activate:
      on-profile: prod

  # Docker Compose 설정
  docker:
    compose:
      enabled: true
      file: ./compose.yaml

  # PostgreSQL Database 설정 (환경 변수 사용)
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/ec_db}
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME:ec_user}
    password: ${DB_PASSWORD:ec_pwd}
    hikari:
      maximum-pool-size: 50 # 운영 환경: 풀 사이즈 증가
      minimum-idle: 10
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  jpa:
    hibernate:
      ddl-auto: validate # 운영 환경: 스키마 유효성 검증만 수행 (자동 변경 금지)
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  # Redis 설정
  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: ${SPRING_DATA_REDIS_PORT:36379} # 운영 Redis 포트

  logging:
    level:
      com.performance.excel: INFO
      org.springframework.web.socket: WARN